"""
This code creates a multiprocessing socket to allow the telescope to simulatenously perform the following functions:
1. Detect satellites.
2. Check for tasks assigned.
3. Processes these tasks and moves them to a checked folder.
@author: Sarah Masih
"""

# importing the multiprocessing module 
import multiprocessing 
import os
import shutil
import time
import watchdog
import watchdog.observers
import watchdog.events


# new file -> pending tasks -> system observes and places into queue -> processing tasks -> system executes task -> checked tasks -> file execution is
# pending tasks directory "C:/Users/sarah/OneDrive/Documents/RMIT/Pending_tasks//"
path = r""

# replace with directory paths
parent_directory = r"C:/Users....Documents/RMIT//"
pending_tasks_path =  r"C:/Users.....Documents/RMIT/Pending_tasks//"
processing_tasks_path = r"C:/Users.....Documents/RMIT/Processing_tasks//"
checked_task_path = r"C:/Users/.......Documents/RMIT/Checked_tasks//"

# repace with GeoScan code
# Add appropriate arguments in params and modify in main function -> (target=satellite_detect, args = (arg1, arg2))
def satellite_detect():
    try:
        while(True):
            # add satellite detection code here
            print("looking for satellites...")
            time.sleep(1)
            print("scanning the sky...")
            time.sleep(1)
    except KeyboardInterrupt:
       print("Scan complete")


def creating_folders(directory):
    # change directory here
    path = os.path.join(parent_directory, directory)
    try:
        os.makedirs(path, exist_ok= False)
        print("Directory '% s' created" % directory)
    except OSError as error:
          print("Directory '%s' already exists" % directory)
    return directory

# Checks if there are any files in pending directory at runtime
def print_pending_task_status():
    old_path, status = check_for_files(pending_tasks_path)
    print("Pending tasks: ", status)
    if(status):
        move_files(old_path, processing_tasks_path)
        print("moving files")
        check_for_files(old_path)
    else:
        print("no files found in printing function")

def move_files(old_path, new_path):
    for file_name in os.listdir(old_path):
        print("Found: ", file_name)
        source = old_path + file_name
        destination = new_path +file_name
        shutil.move(source, destination)
        print("Moved: ", file_name)


def processing_tasks(processing_task_path, checked_task_path):
    processing_task_path, status = check_for_files(processing_task_path)
    if status:
        print("Processing task...")   

        # Enter processing code here
        time.sleep(1)

        print("Task processed! Now moving file to checked folder..")
        move_files(processing_task_path, checked_task_path)
    else:
        print("Nothing to process")


#checking if files already exist
def check_for_files(path):
    if len(os.listdir(path)) == 0:
        print("No files found")
        return path, False
    else:
        print("Files found!")
        return path, True
    

# Watchdog event handler
# Checking if there is a change in folders
def directory_status(src_path):
    event_handler = Handler()
    observer = watchdog.observers.Observer()
    observer.schedule(event_handler, path=src_path, recursive=True)
    observer.start()
    try:
        while True:
            print("Watchdog observing..")
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

class Handler(watchdog.events.PatternMatchingEventHandler):
    
    def __init__(self):
        watchdog.events.PatternMatchingEventHandler.__init__(self, patterns=['*'], ignore_directories=True, case_sensitive=False)
 
    def on_created(self, event):
        print("Watchdog received created event - % s." % event.src_path)
        print_pending_task_status() 
        print("Watchdog received modified event - % s." % event.src_path)
        processing_tasks(processing_tasks_path, checked_task_path)

if __name__ == "__main__": 
	
    creating_folders("Checked_tasks")
    creating_folders("Pending_tasks") 
    creating_folders("Processing_tasks")

    # scan for satellites - GEO Scan code
    p1 = multiprocessing.Process(target=satellite_detect) 

    # Check for any existing tasks at the start of the program
    p2 = multiprocessing.Process(target=print_pending_task_status) 

    # Monitor for any new assigned tasks for the telescope
    p3 = multiprocessing.Process(target=directory_status, args=(parent_directory,)) 

    # Process the tasks
    p4 = multiprocessing.Process(target=processing_tasks, args=(processing_tasks_path,checked_task_path)) 
    
	# starting processes
    p1.start() 
    p2.start() 
    p4.start()
    p3.start()
    

    # Join processes once they're all complete
    p1.join() 
    p2.join() 
    p3.join()
    p4.join()

    # All processes finished 
    print("Done!") 
