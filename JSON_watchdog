# -*- coding: utf-8 -*-
"""
Created on Fri Oct 13 17:18:29 2023
This code uses watchdog function to recognize new JSON files in a given folder. It still needs some work to include img capture, etc.

@author: Kaifur Rashed
"""
import datetime
import time
import json
from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler
import win32com.client

class TelescopeSlewHandler(PatternMatchingEventHandler):
    def __init__(self, telescope):
        super(TelescopeSlewHandler, self).__init__()
        self.telescope = telescope
        self.scheduled_observations = []

    def on_created(self, event):
        if not event.is_directory:
            print(f"New JSON file detected: {event.src_path}")
            self.process_telescope_slew(event.src_path)

    def on_modified(self, event):
        if not event.is_directory:
            print(f"JSON file modified: {event.src_path}")
            self.process_telescope_slew(event.src_path)

    def process_telescope_slew(self, json_file):
        try:
            with open(json_file, "r") as file:
                data = json.load(file)

            if "ra" in data and "dec" in data and "time" in data and "exposure time" in data and "sidereal tracking" in data:
                # Process coordinates and slew_time here
                target_ra = data["ra"]
                target_dec = data["dec"]
                target_time = data["time"]
                exposure_time = data["exposure time"]
                sidereal_tracking = data["sidereal tracking"]

                # You can use the values to control your telescope
                if target_ra is not None and target_dec is not None and target_time is not None:
                    target_datetime = datetime.datetime.strptime(target_time, '%Y-%m-%dT%H:%M:%S')

                    # Check if the observation time is in the future
                    if target_datetime > datetime.timedelta(minutes=5) + datetime.datetime.now():
                        # Add the observation to the scheduled list
                        self.scheduled_observations.append((target_datetime, target_ra, target_dec))
                        print(f"Scheduled observation for RA: {target_ra}, Dec: {target_dec} at {target_datetime}")
                    else:
                        print(f"Ignoring observation with past time: {target_time}")

        except Exception as e:
            print(f"Error processing JSON file: {str(e)}")

# Initialize a list for scheduled observations
scheduled_observations = []

def watch_telescope_slew_folder(telescope, folder_to_watch):
        """
        Sets up the file observer to watch for new files in the folder
        """
        #set up some filename patterns to watch for and to ignore
        patterns = ['*observation*.j*']
        ignore_patterns = ['*acknowledgement*', '*unsafe*']
        ignore_directories = True
       	case_sensitive = True

        #give these to the event handler
        event_handler = PatternMatchingEventHandler(patterns=patterns,
                                ignore_patterns=ignore_patterns,
                                ignore_directories=ignore_directories,
                                case_sensitive=case_sensitive
                                )

        #specify to the event handler what we want to happen when the event is raised
        #event_handler.on_created = TelescopeSlewHandler.on_created
        #event_handler.on_modified = TelescopeSlewHandler.on_modified


        #create the observer
        
        observer = Observer()
        observer.schedule(event_handler, path=folder_to_watch, recursive=False)

        #start the observer
        observer.start()
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()

# Usage
if __name__ == "__main__":
    # Define the folder to watch for JSON files
    folder_to_watch = "C:\Telescope_Codes\JSON"
    
    # Initialize your telescope control logic (telescope object)
    telescope = win32com.client.Dispatch("TheSky64.sky6RASCOMTele")
    event_handler = TelescopeSlewHandler(telescope)
    observer = Observer()
    observer.schedule(event_handler, path=folder_to_watch, recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    
    observer.join()

    # Start watching the folder for new JSON files
    watch_telescope_slew_folder(telescope, folder_to_watch)


